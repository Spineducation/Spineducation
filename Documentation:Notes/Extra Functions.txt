// calling on TextNode Class
 /* let textNode = TextNode("Tap to add spine")
        textNode.position = SCNVector3(0,-0.5,-1.5)
        sceneView.pointOfView?.addChildNode(textNode)*/ // can use textnode class later and figure it out to perfect user intruction, that's a later problem though
    

    func sceneSpacePosition(inFrontOf node: SCNNode) -> SCNVector3 {
        let localPosition = SCNVector3(x: 1, y: 0, z: -1)
        let scenePosition = node.convertPosition(localPosition, to: nil)
        // to: nil is automatically scene space
        return scenePosition
    }

 /*   func drawTrajectory (targetPosition : SCNVector3) { //commented out because no longer using, just to be less confusing

//        let targetPosition = SCNVector3Make(targetPosition.x, targetPosition.y, targetPosition.z)
        // I can't figure out how to make it to go from target to camera, so I just did camera to 0,0,0 so they can select the angle whoops 
       let camera = self.sceneView.pointOfView!
        //let position = camera.convertPosition(SCNVector3(0, -0.1, 0), to: nil)
       let position = camera.convertPosition(targetPosition, to: nil)
        let sphere = SCNSphere(radius: 0.1)
        let sphereNode = SCNNode(geometry: sphere)
        sphereNode.position = position;
    sceneView.scene.rootNode.addChildNode(sphereNode)
        
  //      let line = SCNGeometry.lineFrom(fromVector: camera.position, toVector: targetPosition)
     //   print("camera needs to be in position now - 6 second warning")
      //  DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 6) {
            //let line = SCNGeometry.lineFrom(fromVector: targetPosition, toVector: camera.position)
            //let otherLine = buildLineInTwoPointsWithRotation(fromstartPoint: targetPosition, toendPoint: camera.position, radius: 3, color: UIColor.red)
      //      print("camera position is ", camera.position," position is ", position, "target position is ", targetPosition);
     
            //       self.sceneView.scene.rootNode.addChildNode(twoPointsNode1.cylinderLine(fromstartPoint: position, toendPoint: targetPosition, radius: 0.001, color: .blue))
           // I HAVENT TESTED IT AGAIN WITH SCENEVIEW POV SO CHECK THIS LATER
          
            //self.sceneView.pointOfView?.addChildNode(twoPointsNode1.cylinderLine(fromstartPoint: position, toendPoint: targetPosition, radius: 0.001, color: .red))
            //self.sceneView.pointOfView?.addChildNode(twoPointsNode1.cylinderLine(fromstartPoint: camera.position, toendPoint: targetPosition, radius: 0.05, color: .red))
         //   let lineNode = SCNNode(geometry: line)
          //  lineNode.geometry?.firstMaterial?.diffuse.contents = UIColor.red
         //   self.sceneView.scene.rootNode.addChildNode(lineNode)
     //       //self.sceneView.pointOfView?.addChildNode(lineNode)
            print("line created")
    //    }
        */
        
        

     //     sceneView.pointOfView?.addChildNode(lineNode)

    //}


// try to draw line
            /*
            // let line = SCNGeometry.lineFrom(vector: targetPosition, toVector: self.sceneView.pointOfView!)
            let line = SCNGeometry.lineFrom(vector: targetPosition, toVector: SCNVector3(1,1,1)) //create a line between 2 given SCNVector3 points, need to anchor to both camera and given point
            let lineNode = SCNNode(geometry: line)
            lineNode.geometry?.firstMaterial?.diffuse.contents = UIColor.red
            sceneView.pointOfView?.addChildNode(lineNode) // add as a child node to the camera's point of view
 */
            
            // if comparing touch location to pedical location; not necessary atm
           // let hitResults: [SCNHitTestResult]  = sceneView.hitTest(location, options: hitTestOptions)

    // MARK: - ARSCNViewDelegate
    
    /*
     // Override to create and configure nodes for anchors added to the view's session.
     func renderer(_ renderer: SCNSceneRenderer, nodeFor anchor: ARAnchor) -> SCNNode? {
     let node = SCNNode()
     
     return node
     }
     */
    

  // create a torus shaped object
    func createTarget(position : SCNVector3){
        let torus = SCNTorus(ringRadius: 0.05, pipeRadius: 0.02)
        var targetNode =  SCNNode (geometry : torus)
     
        let camera = self.sceneView.pointOfView!
        targetNode.position = camera.convertPosition(position, to: nil)
        
        targetNode.rotation = camera.rotation
        let action = SCNAction.rotateBy(x: 0, y: CGFloat(5*Double.pi), z: 0, duration: 1)
        targetNode.runAction(action, forKey: "myrotate")
        sceneView.scene.rootNode.addChildNode(targetNode)
    }

     @objc func didTap(withGestureRecognizer recognizer: UIGestureRecognizer) {
        let tapLocation = recognizer.location(in: sceneView)
        let hitTestResults = sceneView.hitTest(tapLocation)
        let result = sceneView.hitTest(tapLocation, types: ARHitTestResult.ResultType.featurePoint)
        //guard
        let hitResult = result.last //else {return}
        guard let node = hitTestResults.first?.node else {
            let hitTestResultsWithFeaturePoints = sceneView.hitTest(tapLocation, types: .featurePoint)
            if  (hitTestResultsWithFeaturePoints.first != nil) {
                let hitTransform = SCNMatrix4((hitResult?.worldTransform)!) // make SCNMatrix4 object out of touch location
                let hitVector = SCNVector3Make(hitTransform.m41, hitTransform.m42, hitTransform.m43) // take relevant components of the touch location
                createSpine(position: hitVector)
            }
            else {
                //      createSpine(position: SCNVector3Make(1,0,-1))
                //    print("SPINE MADE WITH 1 0 -1")
            }
            return
        }
        spine.rootNode.removeFromParentNode()
    }


     override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        
        let location = touches.first!.location(in: sceneView)
        //   guard let touch = touches.first else {
        //     return}
        //let result = sceneView.hitTest(touch.location(in: sceneView), types: ARHitTestResult.ResultType.featurePoint)
        
        // uncomment this out if create spine mode
         if (!spineExists){
            // actual size of spine
          //  createSpine(position: SCNVector3Make(1,1,-1))
            // testing size for spine to see if can do surgery cause we cs not surgeons and that  hard
            createSpine(position: SCNVector3Make(1,1,-0.65))
            spineExists = true;
        }
        if (spineExists){
           // Get the location of the target in Vector3 coordinates
            let targetPosition = sceneView.projectPoint(self.sceneView.pointOfView!.position)
           // print (targetPosition)
            // Convert the SCNVector3 Point to a CGPoint to compare for hittest
            let cgTarget = CGPoint(x:CGFloat(targetPosition.x), y: CGFloat(targetPosition.y))
            print (cgTarget)
            var hitTestOptions = [SCNHitTestOption: Any]()
            hitTestOptions[SCNHitTestOption.boundingBoxOnly] = true
            // if comparing touch location to pedical location; not necessary atm
           // let hitResults: [SCNHitTestResult]  = sceneView.hitTest(location, options: hitTestOptions)
            // check if the location the target was = a pedical
            let hitResults: [SCNHitTestResult]  = sceneView.hitTest(cgTarget , options: hitTestOptions)
            if let hit = hitResults.first {
                print(hit.node.name)
            }
            
        }
        
        //  if (spineExists){
        //print (spine.rootNode.childNode(withName: "Cylinder@", recursively: true));
        //   print (nodeName);
        // }
        
        //   createSpine (position: sceneSpacePosition (inFrontOf: spine.rootNode))
        // call on didTap method to draw the spine if the position has been clicked
        //let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(ViewController.didTap(withGestureRecognizer:)))
        //sceneView.addGestureRecognizer(tapGestureRecognizer)
        /*
         guard let hitResult = result.last else {return}
         let hitTransform = SCNMatrix4(hitResult.worldTransform) // make SCNMatrix4 object out of touch location
         let hitVector = SCNVector3Make(hitTransform.m41, hitTransform.m42, hitTransform.m43) // take relevant components of the touch location from matrix to make SVNVector3 object
         
         if (!spineExists){ // if the spine is not on the screen yet
         createSpine(position: hitVector) // create the spine
         spineExists = true // update the variable to reflect that the spine exists now
         }*/
    }

    in override func viewDidLoad() {}, to set a background image, try scene.background.contents = UIImage(named: "art.scnassets/bullseye.png")

    to colour a node
    bullseyeNode.geometry?.firstMaterial?.diffuse.contents  = UIColor.red

    to fill an image with colour
        func filledImage(source: UIImage, fillColor: UIColor) -> UIImage { // useless, was trying to use to fill an image with red, didn't work to make the back of the target red, used this way for future reference filledImage(source: bullseyeImage!, fillColor: UIColor.red)
        
        UIGraphicsBeginImageContextWithOptions(source.size, false, UIScreen.main.scale)
        
        let context = UIGraphicsGetCurrentContext()
        fillColor.setFill()
        
        context!.translateBy(x: 0, y: source.size.height)
        context!.scaleBy(x: 1.0, y: -1.0)
        
        context!.setBlendMode(CGBlendMode.colorBurn)
        let rect = CGRect(x: 0, y: 0, width: source.size.width, height: source.size.height)
        context!.draw(source.cgImage!, in: rect)
        
        context!.setBlendMode(CGBlendMode.sourceIn)
        context!.addRect(rect)
        context!.drawPath(using: CGPathDrawingMode.fill)
        
        let coloredImg : UIImage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return coloredImg
    }

    to detect tap on screen

        @objc func tapped(recognizer :UITapGestureRecognizer) {
        let sceneView = recognizer.view as! ARSCNView
        let touchLocation = recognizer.location(in: sceneView)
        let hitResults = sceneView.hitTest(touchLocation, options: [:])
        if !hitResults.isEmpty {
            // this means the node has been touched
            print("the new code was reached chill")
        }
    }
    
    private func registerGestureRecognizers() {
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(tapped))
        self.sceneView.addGestureRecognizer(tapGestureRecognizer)
    }

    to get camera as a position
    if let frame = self.sceneView.session.currentFrame {
                let mat = SCNMatrix4(frame.camera.transform)
                let pos = SCNVector3(mat.m41, mat.m42, mat.m43)
                //print("this is new camera position: ",pos)
                let newcgTarget = CGPoint(x:CGFloat(mat.m41), y: CGFloat(mat.m42))
                //print(newcgTarget)
                let hitResults: [SCNHitTestResult]  = sceneView.hitTest(newcgTarget , options: hitTestOptions)
             
                if let hit = hitResults.first {
                    print("my node: ",hit.node.name)
                }
            }

            how to make a character into a node
            let ballNode = make2dNode(image: "⭕️".image()!, width: 2, height: 2)
            sceneView.scene.rootNode.addChildNode(ballNode)



            to make a circle in 2d

            func markStartPoint(point : CGPoint){ just creates a circle, moves with the camera, would've probably been useful for target but 
        let circlePath = UIBezierPath(arcCenter: point, radius: CGFloat(1), startAngle: CGFloat(0), endAngle:CGFloat(Double.pi * 2), clockwise: true)
        
        let shapeLayer = CAShapeLayer()
        shapeLayer.path = circlePath.cgPath
        
        //change the fill color
        shapeLayer.fillColor = UIColor.clear.cgColor
        //you can change the stroke color
        shapeLayer.strokeColor = UIColor.red.cgColor
        //you can change the line width
        shapeLayer.lineWidth = 1.0
        
        view.layer.addSublayer(shapeLayer)
    }