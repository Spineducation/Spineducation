  // create a torus shaped object
    func createTarget(position : SCNVector3){
        let torus = SCNTorus(ringRadius: 0.05, pipeRadius: 0.02)
        var targetNode =  SCNNode (geometry : torus)
     
        let camera = self.sceneView.pointOfView!
        targetNode.position = camera.convertPosition(position, to: nil)
        
        targetNode.rotation = camera.rotation
        let action = SCNAction.rotateBy(x: 0, y: CGFloat(5*Double.pi), z: 0, duration: 1)
        targetNode.runAction(action, forKey: "myrotate")
        sceneView.scene.rootNode.addChildNode(targetNode)
    }

     @objc func didTap(withGestureRecognizer recognizer: UIGestureRecognizer) {
        let tapLocation = recognizer.location(in: sceneView)
        let hitTestResults = sceneView.hitTest(tapLocation)
        let result = sceneView.hitTest(tapLocation, types: ARHitTestResult.ResultType.featurePoint)
        //guard
        let hitResult = result.last //else {return}
        guard let node = hitTestResults.first?.node else {
            let hitTestResultsWithFeaturePoints = sceneView.hitTest(tapLocation, types: .featurePoint)
            if  (hitTestResultsWithFeaturePoints.first != nil) {
                let hitTransform = SCNMatrix4((hitResult?.worldTransform)!) // make SCNMatrix4 object out of touch location
                let hitVector = SCNVector3Make(hitTransform.m41, hitTransform.m42, hitTransform.m43) // take relevant components of the touch location
                createSpine(position: hitVector)
            }
            else {
                //      createSpine(position: SCNVector3Make(1,0,-1))
                //    print("SPINE MADE WITH 1 0 -1")
            }
            return
        }
        spine.rootNode.removeFromParentNode()
    }


     override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        
        let location = touches.first!.location(in: sceneView)
        //   guard let touch = touches.first else {
        //     return}
        //let result = sceneView.hitTest(touch.location(in: sceneView), types: ARHitTestResult.ResultType.featurePoint)
        
        // uncomment this out if create spine mode
         if (!spineExists){
            // actual size of spine
          //  createSpine(position: SCNVector3Make(1,1,-1))
            // testing size for spine to see if can do surgery cause we cs not surgeons and that  hard
            createSpine(position: SCNVector3Make(1,1,-0.65))
            spineExists = true;
        }
        if (spineExists){
           // Get the location of the target in Vector3 coordinates
            let targetPosition = sceneView.projectPoint(self.sceneView.pointOfView!.position)
           // print (targetPosition)
            // Convert the SCNVector3 Point to a CGPoint to compare for hittest
            let cgTarget = CGPoint(x:CGFloat(targetPosition.x), y: CGFloat(targetPosition.y))
            print (cgTarget)
            var hitTestOptions = [SCNHitTestOption: Any]()
            hitTestOptions[SCNHitTestOption.boundingBoxOnly] = true
            // if comparing touch location to pedical location; not necessary atm
           // let hitResults: [SCNHitTestResult]  = sceneView.hitTest(location, options: hitTestOptions)
            // check if the location the target was = a pedical
            let hitResults: [SCNHitTestResult]  = sceneView.hitTest(cgTarget , options: hitTestOptions)
            if let hit = hitResults.first {
                print(hit.node.name)
            }
            
        }
        
        //  if (spineExists){
        //print (spine.rootNode.childNode(withName: "Cylinder@", recursively: true));
        //   print (nodeName);
        // }
        
        //   createSpine (position: sceneSpacePosition (inFrontOf: spine.rootNode))
        // call on didTap method to draw the spine if the position has been clicked
        //let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(ViewController.didTap(withGestureRecognizer:)))
        //sceneView.addGestureRecognizer(tapGestureRecognizer)
        /*
         guard let hitResult = result.last else {return}
         let hitTransform = SCNMatrix4(hitResult.worldTransform) // make SCNMatrix4 object out of touch location
         let hitVector = SCNVector3Make(hitTransform.m41, hitTransform.m42, hitTransform.m43) // take relevant components of the touch location from matrix to make SVNVector3 object
         
         if (!spineExists){ // if the spine is not on the screen yet
         createSpine(position: hitVector) // create the spine
         spineExists = true // update the variable to reflect that the spine exists now
         }*/
    }